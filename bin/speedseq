#!/bin/bash -e

############################################################
#  Program: speedseq
#  Version: 0.0.1
#  Author: Colby Chiang (cc2qe@virginia.edu)
############################################################

# source the paths to the binaries used in the script
function source_binaries() {
    if [[ -e $1 ]]
    then
	echo "Sourcing executables from $1 ..."
	source $1
    else
	echo "Config file $1 not found. Attempting to auto-source executables"
	SPEEDSEQ_HOME=$( dirname `which speedseq` )
	BWA=`which bwa || true`
	SAMBLASTER=`which samblaster || true`
	SAMBAMBA=`which sambamba || true`
	FREEBAYES=`which freebayes || true`
	BEDTOOLS=`which bedtools || true`
	VEP=`which variant_effect_predictor.pl || true`
	VEP_CACHE_DIR="$HOME/.vep/"
	BGZIP=`which bgzip || true`
	TABIX=`which tabix || true`
	LUMPY=`which lumpy || true`
	PAIREND_DISTRO=`which pairend_distro.py || true`
	BEDPETOVCF="$SPEEDSEQ_HOME/src/sv-tools/bedpeToVcf"
	SVTYPER="$SPEEDSEQ_HOME/src/svtyper/svtyper"
    fi
}

## global usage
function usage() {
    echo "
Program: speedseq
Version: 0.0.1
Author: Colby Chiang (cc2qe@virginia.edu)

usage:   speedseq <command> [options]

command: aln      align fastq files with BWA-MEM
         var      call variants with freebayes
         somatic  call somatic variants in a tumor/normal pair with freebayes
         sv       call SVs with lumpy

options: -h       show this message
"
}

# alignment with BWA-MEM
function aln() {
    function aln_usage() {
	echo "
usage:   speedseq aln [options] <reference.fa> <in1.fq> [in2.fq]

positional args:
         reference.fa
                  fasta file (indexed with bwa)
         in1.fq   paired-end fastq file. if -p flag is used then expected to be
                    an interleaved paired-end fastq file, and in2.fq may be omitted.
                    (can be gzipped)
         in2.fq   paired-end fastq file. (can be gzipped)

alignment options:
         -o STR   output prefix [in1.fq]
         -R       read group header line such as \"@RG\tID:libraryname\tSM:samplename\" (required)
         -p       first fastq file consists of interleaved paired-end sequences
         -t INT   threads [1]
         -T DIR   temp directory [./temp]

samblaster options:
         -i       include duplicates in splitters and discordants
         -c INT   maximum number of split alignments for a read to be included in splitter file [2]
         -m INT   minimum non-overlapping base pairs between two alignments for a read to be included in splitter file [20]

global options:
         -K FILE  path to speedseq.config file (default: same directory as speedseq)
         -v       verbose
         -h       show this message
"
    }

    # Check options passed in.
    if test -z "$2"
    then
	aln_usage
	exit 1
    fi

    # set defaults
    SPEEDSEQ_DIR=`dirname $0`
    CONFIG="$SPEEDSEQ_DIR/speedseq.config"
    INTERLEAVED=0
    RG_FMT=""
    OUTPUT=""
    INCLUDE_DUPS="--excludeDups"
    MAX_SPLIT_COUNT=2
    MIN_NON_OVERLAP=20
    THREADS=1
    TEMP_DIR="./temp"
    VERBOSE=0
    SORT_MEM=40 # amount of memory for sorting, in gigabytes

    while getopts ":hw:o:R:pic:m:t:T:vK:" OPTION
    do
	case "${OPTION}" in
	    h)
		aln_usage
		exit 1
		;;
	    R)
		RG="$OPTARG"
		RG_FMT="-R '$OPTARG'"
		;;
	    p)
		INTERLEAVED=1
		;;
	    o)
		OUTPUT="$OPTARG"
		;;
	    i)
		INCLUDE_DUPS=""
		;;
	    c)
		MAX_SPLIT_COUNT="$OPTARG"
		;;
	    m)
		MIN_NON_OVERLAP="$OPTARG"
		;;
	    t)
		THREADS="$OPTARG"
		;;
	    T)
		TEMP_DIR="$OPTARG"
		;;
	    v)
		VERBOSE=1
		;;
	    K)
		CONFIG="$OPTARG"
		;;
	esac
    done

    if [[ INTERLEAVED -eq 1 ]]
    then
	REF="${@:${OPTIND}:1}"
	FQ="${@:$((${OPTIND}+1)):1}"
	if [[ -z "$OUTPUT" ]]
	then
	    OUTPUT=`basename "$FQ"`
	fi

        # Check that the ref and fastq files exist
	if [[ -z "$REF" ]] || [[ ! -f "$REF" ]]
	then
            aln_usage
            echo -e "Error: Reference file $REF not found.\n"
            exit 1
	elif [[ -z "$FQ" ]] || [[ ! -e "$FQ" ]]
	then
            aln_usage
            echo -e "Error: Fastq file $FQ not found.\n"
            exit 1
	fi
    else
	REF="${@:${OPTIND}:1}"
	FQ1="${@:$((${OPTIND}+1)):1}"
	FQ2="${@:$((${OPTIND}+2)):1}"
	if [[ -z "$OUTPUT" ]]
	then
	    OUTPUT=`basename "$FQ1"`
	fi

        # Check that the ref and fastq files exist
	if [[ -z "$REF" ]] || [[ ! -f "$REF" ]]
	then
            aln_usage
            echo -e "Error: Reference file $REF not found.\n"
            exit 1
	elif [[ -z "$FQ1" ]] || [[ ! -e "$FQ1" ]]
	then
            aln_usage
            echo -e "Error: Fastq file $FQ1 not found.\n"
            exit 1
	elif [[ -z "$FQ2" ]] || [[ ! -e "$FQ2" ]]
	then
            aln_usage
            echo -e "Error: Fastq file $FQ2 not found. (single-end reads not supported)\n"
            exit 1
	fi
    fi

    OUTBASE=`basename "$OUTPUT"`

    # Check for readgroup flag
    if [[ -z $RG_FMT ]]
    then
	aln_usage
	echo -e "Error: no readgroup found. Please set a readgroup with the -R flag.\n"
	exit 1
    fi

    # Check the for the relevant binaries
    source_binaries $CONFIG

    if [[ -z "$BWA" ]]
    then
	aln_usage
        echo -e "Error: bwa executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ -z  "$SAMBLASTER" ]]
    then
	aln_usage
        echo -e "Error: samblaster executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ -z "$SAMBAMBA" ]]
    then
	aln_usage
        echo -e "Error: sambamba executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    fi

    echo "Aligning..."

    if [[ $VERBOSE -eq 1 ]]
    then
	echo "
        mkdir -p $TEMP_DIR/full $TEMP_DIR/spl $TEMP_DIR/disc
        mkfifo $TEMP_DIR/spl_pipe $TEMP_DIR/disc_pipe"
    fi

    # create temp files
    mkdir -p $TEMP_DIR/full $TEMP_DIR/spl $TEMP_DIR/disc
    if [[ ! -e $TEMP_DIR/spl_pipe ]]
    then
	mkfifo $TEMP_DIR/spl_pipe
    fi
    if [[ ! -e $TEMP_DIR/disc_pipe ]]
    then
	mkfifo $TEMP_DIR/disc_pipe
    fi

    # alignment command
    if [[ $INTERLEAVED -eq 1 ]]
    then
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
        $BWA mem -t $THREADS -M -p $RG_FMT $REF $FQ | \\
            $SAMBLASTER $INCLUDE_DUPS --addMateTags --maxSplitCount $MAX_SPLIT_COUNT --minNonOverlap $MIN_NON_OVERLAP --splitterFile $TEMP_DIR/spl_pipe --discordantFile $TEMP_DIR/disc_pipe | \\
            $SAMBAMBA view -S -f bam -l 0 /dev/stdin | \\
            $SAMBAMBA sort -t $THREADS -m $((${SORT_MEM}-2))G --tmpdir=$TEMP_DIR/full -o $OUTPUT.bam /dev/stdin

        $SAMBAMBA view -S -f bam -l 0 $TEMP_DIR/spl_pipe | \\
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/spl -o $OUTPUT.splitters.bam /dev/stdin
        $SAMBAMBA view -S -f bam $TEMP_DIR/disc_pipe | \\
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/disc -o $OUTPUT.discordants.bam /dev/stdin"
	fi

	echo "
        $BWA mem -t $THREADS -M -p $RG_FMT $REF $FQ | \
	    $SAMBLASTER $INCLUDE_DUPS --addMateTags --maxSplitCount $MAX_SPLIT_COUNT --minNonOverlap $MIN_NON_OVERLAP --splitterFile $TEMP_DIR/spl_pipe --discordantFile $TEMP_DIR/disc_pipe | \
            $SAMBAMBA view -S -f bam -l 0 /dev/stdin | \
	    $SAMBAMBA sort -t $THREADS -m $((${SORT_MEM}-2))G --tmpdir=$TEMP_DIR/full -o $OUTPUT.bam /dev/stdin
        
        $SAMBAMBA view -S -f bam -l 0 $TEMP_DIR/spl_pipe | \
	    $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/spl -o $OUTPUT.splitters.bam /dev/stdin
        $SAMBAMBA view -S -f bam $TEMP_DIR/disc_pipe | \
	    $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/disc -o $OUTPUT.discordants.bam /dev/stdin
        " | parallel -j 3
    else
	if [[ $VERBOSE -eq 1 ]]
	then
        echo -e "
        $BWA mem -t $THREADS -M $RG_FMT $REF $FQ1 $FQ2 | \\
            $SAMBLASTER $INCLUDE_DUPS --addMateTags --maxSplitCount $MAX_SPLIT_COUNT --minNonOverlap $MIN_NON_OVERLAP --splitterFile $TEMP_DIR/spl_pipe --discordantFile $TEMP_DIR/disc_pipe | \\
            $SAMBAMBA view -S -f bam -l 0 /dev/stdin | \\
            $SAMBAMBA sort -t $THREADS -m $((${SORT_MEM}-2))G --tmpdir=$TEMP_DIR/full -o $OUTPUT.bam /dev/stdin

        $SAMBAMBA view -S -f bam -l 0 $TEMP_DIR/spl_pipe | \\
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/spl -o $OUTPUT.splitters.bam /dev/stdin
        $SAMBAMBA view -S -f bam $TEMP_DIR/disc_pipe | \\
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/disc -o $OUTPUT.discordants.bam /dev/stdin"
	fi

        echo "
        $BWA mem -t $THREADS -M $RG_FMT $REF $FQ1 $FQ2 | \
            $SAMBLASTER $INCLUDE_DUPS --addMateTags --maxSplitCount $MAX_SPLIT_COUNT --minNonOverlap $MIN_NON_OVERLAP --splitterFile $TEMP_DIR/spl_pipe --discordantFile $TEMP_DIR/disc_pipe | \
            $SAMBAMBA view -S -f bam -l 0 /dev/stdin | \
            $SAMBAMBA sort -t $THREADS -m $((${SORT_MEM}-2))G --tmpdir=$TEMP_DIR/full -o $OUTPUT.bam /dev/stdin

        $SAMBAMBA view -S -f bam -l 0 $TEMP_DIR/spl_pipe | \
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/spl -o $OUTPUT.splitters.bam /dev/stdin
        $SAMBAMBA view -S -f bam $TEMP_DIR/disc_pipe | \
            $SAMBAMBA sort -t 4 -m 1G --tmpdir=$TEMP_DIR/disc -o $OUTPUT.discordants.bam /dev/stdin
        " | parallel -j 3
    fi
    
    # index the files
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        $SAMBAMBA index $OUTPUT.bam
            $SAMBAMBA index $OUTPUT.discordants.bam
            $SAMBAMBA index $OUTPUT.splitters.bam"
    fi

    echo "
    $SAMBAMBA index $OUTPUT.bam
    $SAMBAMBA index $OUTPUT.discordants.bam
    $SAMBAMBA index $OUTPUT.splitters.bam
    " | parallel -j 3

    # clean up
    rm -r $TEMP_DIR

    echo "Done"

    # exit cleanly
    exit 0
}

function var() {
    function var_usage() {
        echo "
usage:   speedseq var [options] <reference.fa> <input1.bam> [input2.bam [...]]

positional args:
         reference.fa
                  genome reference fasta file
         input.bam
                  BAM file(s) to call variants on. Must have readgroup information,
                    and the SM readgroup tags will be the VCF column header

options:
         -o STR   output prefix [input1.bam]
         -w FILE  BED file of windowed genomic intervals
         -q FLOAT minimum variant QUAL score to output [1]
         -t INT   threads [1]
         -T DIR   temp directory [./temp]
         -A BOOL  annotate the vcf with VEP (true or false) (default: true)
         -K FILE  path to speedseq.config file (default: same directory as speedseq)
         -v       verbose
         -h       show this message
"
    }

    # Check options passed in.
    if test -z "$2"
    then
        var_usage
        exit 1
    fi

    # set defaults
    SPEEDSEQ_DIR=`dirname $0`
    CONFIG="$SPEEDSEQ_DIR/speedseq.config"
    THREADS=1
    MINQUAL=1
    TEMP_DIR="./temp"
    ANNOTATE="true"
    MINQUAL=1
    VERBOSE=0

    while getopts ":ho:w:t:T:A:q:vK:" OPTION
    do
        case "${OPTION}" in
            h)
                var_usage
                exit 1
                ;;
            o)
                OUTPUT="$OPTARG"
                ;;
	    w)
		WINDOWS="$OPTARG"
		;;
	    q)
		MINQUAL="$OPTARG"
		;;
            t)
                THREADS="$OPTARG"
                ;;
            T)
                TEMP_DIR="$OPTARG"
                ;;
	    A)
		ANNOTATE=`echo "$OPTARG" | tr [:upper:] [:lower:]`
		;;
            v)
                VERBOSE=1
                ;;
	    K)
		CONFIG="$OPTARG"
		;;
        esac
    done

    # parse the positional arguments
    REF="${@:${OPTIND}:1}"
    BAM_STRING="${@:$((${OPTIND}+1))}"
    BAM_LIST=($BAM_STRING)
    if [[ -z $OUTPUT ]]
    then
	OUTPUT=`basename "${BAM_LIST[0]}"`
    fi
    OUTBASE=`basename "$OUTPUT"`

    OPTIND=0

    # Check the for the relevant binaries
    source_binaries $CONFIG

    if [[ ! -f "$FREEBAYES" ]]
    then
	var_usage
        echo -e "Error: freebayes executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$BEDTOOLS" ]]
    then
	var_usage
        echo -e "Error: bedtools executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$BGZIP" ]]
    then
	var_usage
        echo -e "Error: bgzip executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$TABIX" ]]
    then
	var_usage
        echo -e "Error: tabix executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$VEP" ]] && [[ "$ANNOTATE" == "true" ]]
    then
	var_usage
        echo -e "Error: VEP not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -d "$VEP_CACHE_DIR" ]] && [[ "$ANNOTATE" == "true" ]]
    then
	var_usage
        echo -e "Error: VEP cache directory not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    fi

    # Check that ANNOTATE is either true or false
    if [[ "$ANNOTATE" != "true" ]] && [[ "$ANNOTATE" != "false" ]]
    then
	var_usage
	echo -e "Error: -A must be either true or false\n"
	exit 1
    fi

    # Check that the ref and bam files exist
    if [[ -z "$REF" ]] || [[ ! -f "$REF" ]]
    then
	var_usage
	echo -e "Error: Reference file $REF not found.\n"
	exit 1
    fi

    for TEST_BAM in ${BAM_LIST[@]}
    do
	if [[ ! -f $TEST_BAM ]]
	then
	    var_usage
	    echo -e "Error: BAM file $TEST_BAM not found.\n"
	    exit 1
	fi
    done

    echo "Calling variants..."

    # make temporary directory
    if [[ $VERBOSE -eq 1 ]]
    then
	echo "
        mkdir -p $TEMP_DIR"
    fi
    mkdir -p $TEMP_DIR

    # if no windows file, then make naive windows based on the chroms
    if [[ -z $WINDOWS ]]
    then
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
        $SAMBAMBA view -H ${BAM_LIST[0]} | grep \"^@SQ\" | cut -f 2- | awk '{ gsub(\"^SN:\",\"\",\$1); gsub(\"^LN:\",\"\",\$2); print \$1\"\\\t0\\\t\"\$2; }' > $TEMP_DIR/windows.bed"
	fi

	$SAMBAMBA view -H ${BAM_LIST[0]} | grep "^@SQ" | cut -f 2- | awk '{ gsub("^SN:","",$1); gsub("^LN:","",$2); print $1"\t0\t"$2; }' > $TEMP_DIR/windows.bed
	WINDOWS="$TEMP_DIR/windows.bed"
    fi
    
    # construct the parallel command over windows
    if [[ $VERBOSE ]]
    then
        echo -e "
        $FREEBAYES \\
            -f $REF \\
            --region \$chrom:\$start..\$end \\
            $BAM_STRING \\
            | awk '\$6>=$MINQUAL' \\
            > ${TEMP_DIR}/$OUTBASE.$i.vcf"
    fi
    
    for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
    do
        echo "$FREEBAYES \
        -f $REF \
        --region $i \
        $BAM_STRING \
        | awk '\$6>=$MINQUAL' \
        > ${TEMP_DIR}/$OUTBASE.$i.vcf"
    done > $TEMP_DIR/var_command.txt

    # run the parallel freebayes command
    if [[ $VERBOSE ]]
    then
	echo "
        cat $TEMP_DIR/var_command.txt | parallel -j $THREADS"
    fi
    cat $TEMP_DIR/var_command.txt | parallel -j $THREADS

    # make vcf header
    i=`head -n 1 $WINDOWS | awk '{print $1":"$2".."$3}'`
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        grep \"^#\" $TEMP_DIR/$OUTBASE.$i.vcf > $TEMP_DIR/header.txt"
    fi
    grep "^#" $TEMP_DIR/$OUTBASE.$i.vcf > $TEMP_DIR/header.txt

    # merge the vcf region files

    if [[ "$ANNOTATE" == "true" ]]
    then
        # merge the vcf region files, with VEP annotation
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
            cat $TEMP_DIR/$OUTBASE.\"$chrom:\$start..\$end\".vcf | grep -v \"^#\" \\
                | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \\
                | $VEP \\
                --fork $THREADS \\
                -o /dev/stdout \\
                --force_overwrite \\
                --offline \\
                --no_stats \\
                --cache \\
                --dir_cache $VEP_CACHE_DIR \\
                --species homo_sapiens \\
                --sift b \\
                --polyphen b \\
                --symbol \\
                --numbers \\
                --biotype \\
                --total_length \\
                --vcf \\
                --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \\
                | $BGZIP -c > $OUTPUT.vcf.gz"
	fi

	for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
	do
            # add "|| true" so it doesn't bail upon failure.
	    cat $TEMP_DIR/$OUTBASE."$i".vcf | grep -v "^#" || true
	done \
	    | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \
	    | $VEP \
            --fork $THREADS \
            -o /dev/stdout \
	    --force_overwrite \
            --offline \
            --no_stats \
            --cache \
            --dir_cache $VEP_CACHE_DIR \
            --species homo_sapiens \
            --sift b \
            --polyphen b \
            --symbol \
            --numbers \
            --biotype \
            --total_length \
            --vcf \
            --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \
	    | $BGZIP -c > $OUTPUT.vcf.gz

    else
	if [[ $VERBOSE -eq 1 ]]
        then
            echo -e "
            cat $TEMP_DIR/$OUTBASE.\"$chrom:\$start..\$end\".vcf | grep -v \"^#\" \\
                | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \\
                | $BGZIP -c > $OUTPUT.vcf.gz"
        fi

	for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
	do
            # if this fails then it bails out the script
	    cat $TEMP_DIR/$OUTBASE."$i".vcf | grep -v "^#" || true
	done \
	    | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \
	    | $BGZIP -c > $OUTPUT.vcf.gz
    fi

    # index the vcf
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
	$TABIX -f -p vcf $OUTPUT.vcf.gz"
    fi
    $TABIX -f -p vcf $OUTPUT.vcf.gz

    # clean up
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        rm -r $TEMP_DIR"
    fi
    rm -r $TEMP_DIR

    echo "Done"

    # exit cleanly
    exit 0

}

function somatic() {
    function somatic_usage() {
        echo "
usage:   speedseq somatic [options] <reference.fa> <normal.bam> <tumor.bam>

positional args:
         reference.fa
                  genome reference fasta file
         normal.bam
                  germline BAM file(s) (comma separated BAMs from multiple libraries).
                  Must have readgroup information, and the SM readgroup tag will
                  be the VCF column header
         tumor.bam
                  tumor BAM file(s) (comma separated BAMs for multiple libraries).
                    Must have readgroup information, and the SM readgroup tag will
                    be the VCF column header

options:
         -o STR   output prefix [tumor.bam]
         -w FILE  BED file of windowed genomic intervals
         -t INT   threads [1]
         -F FLOAT Require at least this fraction of observations supporting
                    an alternate allele within a single individual in order
                    to evaluate the position [0.05]
         -C INT   Require at least this count of observations supporting
                    an alternate allele within a single individual in order
                    to evaluate the position [2]
         -q FLOAT minimum variant quality to output [1]
         -T DIR   temp directory [./temp]
         -A BOOL  annotate the vcf with VEP (true or false) (default: true)
         -K FILE  path to speedseq.config file (default: same directory as speedseq)
         -v       verbose
         -h       show this message
"
    }

    # Check options passed in.
    if test -z "$3"
    then
        somatic_usage
        exit 1
    fi

    # set defaults
    SPEEDSEQ_DIR=`dirname $0`
    CONFIG="$SPEEDSEQ_DIR/speedseq.config"
    REF="${@:(-3):1}"
    OUTPUT=`basename "$TUMOR_BAM"`
    THREADS=1
    MIN_ALT_FRACTION=0.05
    MIN_ALT_COUNT=2
    TEMP_DIR="./temp"
    ANNOTATE="true"
    MINQUAL=1
    VERBOSE=0

    while getopts ":ho:w:t:F:C:T:A:q:vK:" OPTION
    do
        case "${OPTION}" in
            h)
                somatic_usage
                exit 1
                ;;
            o)
                OUTPUT="$OPTARG"
                ;;
            w)
                WINDOWS="$OPTARG"
                ;;
            t)
                THREADS="$OPTARG"
                ;;
            F)
                MIN_ALT_FRACTION="$OPTARG"
                ;;
	    C)
		MIN_ALT_COUNT="$OPTARG"
		;;
            T)
                TEMP_DIR="$OPTARG"
                ;;
            A)
                ANNOTATE=`echo "$OPTARG" | tr [:upper:] [:lower:]`
                ;;
	    q)
		MINQUAL="$OPTARG"
		;;
            v)
                VERBOSE=1
                ;;
	    K)
		CONFIG="$OPTARG"
		;;
        esac
    done

    # parse the BAM strings
    NORMAL_BAM_STRING="${@:$((${OPTIND}+1))}"
    TUMOR_BAM_STRING="${@:$((${OPTIND}+2))}"
    TUMOR_BAM_LIST=(`echo $TUMOR_BAM_STRING | tr "," " "`)
    NORMAL_BAM_LIST=`echo $NORMAL_BAM_STRING | tr "," " "`

    if [[ -z $OUTPUT ]]
    then
	OUTPUT=`basename "${TUMOR_BAM_LIST[0]}"`
    fi
    OUTBASE=`basename "$OUTPUT"`
    OPTIND=0

    # Check the for the relevant binaries
    source_binaries $CONFIG

    if [[ ! -f "$FREEBAYES" ]]
    then
        somatic_usage
        echo -e "Error: freebayes executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$BEDTOOLS" ]]
    then
        somatic_usage
        echo -e "Error: bedtools executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$BGZIP" ]]
    then
        somatic_usage
        echo -e "Error: bgzip executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$TABIX" ]]
    then
        somatic_usage
        echo -e "Error: tabix executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$VEP" ]] && [[ "$ANNOTATE" == "true" ]]
    then
        somatic_usage
        echo -e "Error: VEP not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$VEP_CACHE_DIR" ]] && [[ "$ANNOTATE" == "true" ]]
    then
        somatic_usage
        echo -e "Error: VEP cache directory not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    fi

    # Check that ANNOTATE is either true or false
    if [[ "$ANNOTATE" != "true" ]] && [[ "$ANNOTATE" != "false" ]]
    then
	somatic_usage
	echo -e "Error: -A must be either true or false\n"
	exit 1
    fi

    # Check that the ref and bam files exist
    if [[ -z "$REF" ]] || [[ ! -f "$REF" ]]
    then
        somatic_usage
        echo -e "Error: Reference file $REF not found.\n"
        exit 1
    fi
    for TEST_BAM in ${NORMAL_BAM_LIST[@]} ${TUMOR_BAM_LIST[@]}
    do
        if [[ ! -f $TEST_BAM ]]
        then
            somatic_usage
            echo -e "Error: BAM file $TEST_BAM not found.\n"
            exit 1
        fi
    done

    echo "Calling somatic variants..."
    
    # make temporary directory
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        mkdir -p $TEMP_DIR"
    fi
    mkdir -p $TEMP_DIR

    # if no windows file, then make naive windows based on the chroms
    if [[ -z $WINDOWS ]]
    then
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
        $SAMBAMBA view -H ${NORMAL_BAM_LIST[0]} | grep \"^@SQ\" | cut -f 2- | awk '{ gsub(\"^SN:\",\"\",\$1); gsub(\"^LN:\",\"\",\$2); print \$1\"\\\t0\\\t\"\$2; }' > $TEMP_DIR/windows.bed"
	fi
        $SAMBAMBA view -H ${NORMAL_BAM_LIST[0]} | grep "^@SQ" | cut -f 2- | awk '{ gsub("^SN:","",$1); gsub("^LN:","",$2); print $1"\t0\t"$2; }' > $TEMP_DIR/windows.bed
        WINDOWS="$TEMP_DIR/windows.bed"
    fi

    # write command to call variants on each of the windows in parallel
    NORMAL_BAM_FMT=`echo $NORMAL_BAM_STRING | tr "," " "`
    TUMOR_BAM_FMT=`echo $TUMOR_BAM_STRING | tr "," " "`
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        $FREEBAYES -f $REF \\
            --pooled-discrete \\
            --genotype-qualities \\
            --min-alternate-fraction ${MIN_ALT_FRACTION} \\
            --min-alternate-count ${MIN_ALT_COUNT} \\
            --region \$chrom:\$start..\$end \\
            $NORMAL_BAM_FMT $TUMOR_BAM_FMT \\
            | awk '\$6>=$MINQUAL' \\
            > ${TEMP_DIR}/$OUTBASE.\$chrom:\$start..\$end.vcf"
    fi
    for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
    do
	echo "$FREEBAYES -f $REF \
        --pooled-discrete \
        --genotype-qualities \
        --min-alternate-fraction ${MIN_ALT_FRACTION} \
        --min-alternate-count ${MIN_ALT_COUNT} \
        --region $i \
        $NORMAL_BAM_FMT $TUMOR_BAM_FMT \
        | awk '\$6>=$MINQUAL' \
        > ${TEMP_DIR}/$OUTBASE.$i.vcf"
    done > $TEMP_DIR/var_command.txt

    # run the freebayes command in parallel
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        cat $TEMP_DIR/var_command.txt | parallel -j $THREADS"
    fi
    cat $TEMP_DIR/var_command.txt | parallel -j $THREADS

    # make vcf header
    i=`head -n 1 $WINDOWS | awk '{print $1":"$2".."$3}'`
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        grep \"^#\" $TEMP_DIR/$OUTBASE.$i.vcf > $TEMP_DIR/header.txt"
    fi
    grep "^#" $TEMP_DIR/$OUTBASE.$i.vcf > $TEMP_DIR/header.txt

    # get the tumor and normal readgroups
    TUMOR_RG=`cat ${TEMP_DIR}/header.txt | tail -n 1 | cut -f 10`
    NORMAL_RG=`cat ${TEMP_DIR}/header.txt | tail -n 1 | cut -f 11`

    if [[ "$ANNOTATE" == "true" ]]
    then
        # merge the vcf region files, with VEP annotation
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
            cat $TEMP_DIR/$OUTBASE.\"\$chrom:\$start..\$end\".vcf | grep -v \"^#\" \\
                | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \\
                | $VEP \\
                --fork $THREADS \\
                -o /dev/stdout \\
                --force_overwrite \\
                --offline \\
                --no_stats \\
                --cache \\
                --dir_cache $VEP_CACHE_DIR \\
                --species homo_sapiens \\
                --sift b \\
                --polyphen b \\
                --symbol \\
                --numbers \\
                --biotype \\
                --total_length \\
                --vcf \\
                --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \\
                | $BGZIP -c > $OUTPUT.vcf.gz"
	fi    
	for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
	do
            # if this fails then it bails out the script, unless || true present
            cat $TEMP_DIR/$OUTBASE."$i".vcf | grep -v "^#" || true
	done \
            | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \
            | $VEP \
            --fork $THREADS \
            -o /dev/stdout \
	    --force_overwrite \
            --offline \
            --no_stats \
            --cache \
            --dir_cache $VEP_CACHE_DIR \
            --species homo_sapiens \
            --sift b \
            --polyphen b \
            --symbol \
            --numbers \
            --biotype \
            --total_length \
            --vcf \
            --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \
            | $BGZIP -c > $OUTPUT.vcf.gz
    else
        # merge the vcf region files, without VEP annotation
	if [[ $VERBOSE -eq 1 ]]
	then
	    echo -e "
        cat $TEMP_DIR/$OUTBASE.\"\$chrom:\$start..\$end\".vcf | grep -v \"^#\" \\
            | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \\
            | $BGZIP -c > $OUTPUT.vcf.gz"
	fi    
	for i in `cat $WINDOWS | awk '{print $1":"$2".."$3}'`
	do
            # if this fails then it bails out the script
            cat $TEMP_DIR/$OUTBASE."$i".vcf | grep -v "^#" || true
	done \
            | $BEDTOOLS sort -i stdin | cat $TEMP_DIR/header.txt - \
            | $BGZIP -c > $OUTPUT.vcf.gz
    fi

    # index the vcf
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        $TABIX -f -p vcf $OUTPUT.vcf.gz"
    fi
    $TABIX -f -p vcf $OUTPUT.vcf.gz

    # clean up
    if [[ $VERBOSE -eq 1 ]]
    then
	echo -e "
        rm -r $TEMP_DIR"
    fi
    rm -r $TEMP_DIR

    echo "Done"

    # exit cleanly
    exit 0

}

function sv() {
    function sv_usage() {
        echo "
usage:   speedseq sv [options]

sv options:
         -B FILE  full BAM file(s) (comma separated) (required)
         -S FILE  split reads BAM file(s) (comma separated, order as in -B) (required)
         -D FILE  discordant reads BAM files(s) (comma separated, order as in -B) (required)
         -R FILE  indexed reference genome fasta file (required)
         -o STR   output prefix [fullBam.bam]
         -t INT   threads [1] 
         -x FILE  BED file to exclude
         -g       genotype SV breakends with svtyper
         -d       calculate read-depth with CNVnator
         -A BOOL  annotate the vcf with VEP (true or false) (default: true)
         -m INT   minimum weight for a call [4]
         -r FLOAT trim threshold [0]
         -L INT   read length [auto]
         -T DIR   temp directory [./temp]
         -k       keep temporary files

         -s STR   lumpy split read parameters [auto]
                      bam_file:<splitreads.bam>,
                      back_distance:<10>,
                      min_mapping_threshold:<20>,
                      weight:<1>,
                      id:<11>,
                      min_clip:<20>

         -p STR   lumpy discordant read parameters [auto]
                      bam_file:<discreads.bam>,
                      histo_file:<auto>,
                      mean:<auto>,
                      stdev:<auto>,
                      read_length:<auto>,
                      min_non_overlap:<read_length>,
                      discordant_z:<5>,
                      back_distance:<10>,
                      min_mapping_threshold:<20>,
                      weight:<1>,
                      id:<10>

global options:
         -K FILE  path to speedseq.config file (default: same directory as speedseq)
         -v       verbose
         -h       show this message
"
    }

    # set defaults
    SPEEDSEQ_DIR=`dirname $0`
    CONFIG="$SPEEDSEQ_DIR/speedseq.config"
    THREADS=1
    ANNOTATE="true"
    MIN_WEIGHT=4
    TRIM_THRES=0
    EXCLUDE_BED=
    TEMP_DIR="./temp"
    GENOTYPE=0
    READDEPTH=0
    VERBOSE=0
    KEEP=0
    OUTPUT=""

    while getopts ":hB:S:D:R:o:m:r:L:x:s:p:T:t:A:dgkvK:" OPTION
    do
	case "${OPTION}" in
            h)
                sv_usage
                exit 1
                ;;
	    B)
		FULL_BAM_STRING="$OPTARG"
		;;
	    S)
		SPL_BAM_STRING="$OPTARG"
		;;
	    D)
		DISC_BAM_STRING="$OPTARG"
		;;
	    R)
		REF="$OPTARG"
		;;
            o)
                OUTPUT="$OPTARG"
                ;;
            m)
                MIN_WEIGHT="$OPTARG"
                ;;
            r)
                TRIM_THRES="$OPTARG"
                ;;
	    L)
		READ_LENGTH="$OPTARG"
		;;
            x)
	        EXCLUDE_BED="$OPTARG"
		EXCLUDE_BED_FMT="-x $EXCLUDE_BED"
		;;  
	    s)
		LUMPY_SPL_STRING="-sr $OPTARG"
		;;
	    p)
		LUMPY_DISC_STRING="-pe $OPTARG"
		;;
            T)
                TEMP_DIR="$OPTARG"
                ;;
	    t)
		THREADS="$OPTARG"
		;;
	    A)
		ANNOTATE=`echo "$OPTARG" | tr [:upper:] [:lower:]`
		;;
	    d)
		READDEPTH=1
		;;
	    g)
		GENOTYPE=1
		;;
            v)
                VERBOSE=1
		;;
	    k)
		KEEP=1
		;;
	    K)
		CONFIG="$OPTARG"
		;;
	esac
    done

    # parse the BAM strings
    FULL_BAM_LIST=(`echo $FULL_BAM_STRING | tr "," " "`)
    SPL_BAM_LIST=(`echo $SPL_BAM_STRING | tr "," " "`)
    DISC_BAM_LIST=(`echo $DISC_BAM_STRING | tr "," " "`)

    OPTIND=0

    # Check the for the relevant binaries
    source_binaries $CONFIG

    if [[ -z "$LUMPY" ]]
    then
	sv_usage
        echo -e "Error: lumpy executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ -z  "$PAIREND_DISTRO" ]]
    then
	sv_usage
        echo -e "Error: pairend_distro.py executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ -z  "$SAMBAMBA" ]]
    then
	sv_usage
        echo -e "Error: sambamba executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ -z  "$BEDPETOVCF" ]]
    then
	sv_usage
        echo -e "Error: bedpeToVcf executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -f "$VEP" ]] && [[ "$ANNOTATE" == "true" ]]
    then
	sv_usage
        echo -e "Error: VEP not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    elif [[ ! -d "$VEP_CACHE_DIR" ]] && [[ "$ANNOTATE" == "true" ]]
    then
	sv_usage
        echo -e "Error: VEP cache directory not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    fi

    # if genotyping requested, look for svtyper
    if [[ "$GENOTYPE" -eq 1 ]] && [[ -z "$SVTYPER" ]]
    then
	sv_usage
        echo -e "Error: svtyper executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
        exit 1
    fi

    # if CNV read-depth requested, look for cnvnator executables
    if [[ "$READDEPTH" -eq 1 ]]
    then
	if [[ -z "$CNVNATOR_MULTI" ]]
	then
	    sv_usage
            echo -e "Error: cnvnator executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
            exit 1
	elif [[ -z "$CNVNATOR_WRAPPER" ]]
	then
	    sv_usage
            echo -e "Error: cnvnator_wrapper.py executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
            exit 1
	elif [[ -z "$ANNOTATE_RD" ]]
	then
	    sv_usage
            echo -e "Error: annotate_rd.py executable not found. Please set path in $SPEEDSEQ_DIR/speedseq.config file\n"
            exit 1
	fi
    fi

    # Check that the required files exist
    if [[ ! -f $REF ]]
    then
	sv_usage
	echo -e "Error: reference fasta file $REF not found\n"
	exit 1
    fi
    if [[ ! -f $REF.fai && ! -f $(echo ${REF%*.*}).fai ]]
    then
	sv_usage
	echo -e "Error: reference fasta file $REF not indexed\n"
	exit 1
    fi
    if [[ ${#FULL_BAM_LIST[@]} -eq 0 ]] || [[ ${#SPL_BAM_LIST[@]} -eq 0 ]] || [[ ${#DISC_BAM_LIST[@]} -eq 0 ]]
    then
	sv_usage
	echo -e "Error: -B, -S, and -D are required\n"
	exit 1
    fi
    if [[ ! ${#FULL_BAM_LIST[@]} -eq ${#SPL_BAM_LIST[@]} ]] || [[ ! ${#FULL_BAM_LIST[@]} -eq ${#DISC_BAM_LIST[@]} ]]
    then
	sv_usage
	echo -e "Error: -B, -S, and -D arguments have different lengths\n"
	exit 1
    fi
    for TEST_BAM in ${FULL_BAM_LIST[@]} ${SPL_BAM_LIST[@]} ${DISC_BAM_LIST[@]}
    do
        if [[ ! -f $TEST_BAM ]]
        then
            sv_usage
            echo -e "Error: BAM file $TEST_BAM not found.\n"
            exit 1
        fi
    done

    # Check that ANNOTATE is either true or false
    if [[ "$ANNOTATE" != "true" ]] && [[ "$ANNOTATE" != "false" ]]
    then
	sv_usage
	echo -e "Error: -A must be either true or false\n"
	exit 1
    fi

    # default OUTPUT if not provided
    if test -z "$OUTPUT"
    then
	OUTPUT=`basename "${FULL_BAM_LIST[0]}"`
    fi
    OUTBASE=`basename "$OUTPUT"`

    # make temporary directory
    mkdir -p ${TEMP_DIR}

    # create the LUMPY config file for generating the VCF
    for i in $( seq 0 $(( ${#FULL_BAM_LIST[@]}-1 )) )
    do
        FULL_BAM=${FULL_BAM_LIST[$i]}
        SPL_BAM=${SPL_BAM_LIST[$i]}
        DISC_BAM=${DISC_BAM_LIST[$i]}

	FULL_SAMPLE=`$SAMBAMBA view -H $FULL_BAM | grep -m 1 "^@RG" | awk -v i=$i '{ for (j=1;j<=NF;++j) {if ($j~"^SM:") { gsub("^SM:","",$j); print $j } } }'`
	SPL_SAMPLE=`$SAMBAMBA view -H $SPL_BAM | grep -m 1 "^@RG" | awk -v i=$i '{ for (j=1;j<=NF;++j) {if ($j~"^SM:") { gsub("^SM:","",$j); print $j } } }'`
	DISC_SAMPLE=`$SAMBAMBA view -H $DISC_BAM | grep -m 1 "^@RG" | awk -v i=$i '{ for (j=1;j<=NF;++j) {if ($j~"^SM:") { gsub("^SM:","",$j); print $j } } }'`

	echo -e "$DISC_SAMPLE\t$(($i+1))0\tPE\t$DISC_BAM"
	echo -e "$SPL_SAMPLE\t$(($i+1))1\tSR\t$SPL_BAM"
	echo -e "$FULL_SAMPLE\t$(($i+1))2\tRD\t$FULL_BAM"
	
    done > $TEMP_DIR/$OUTBASE.sample.config

    # if LUMPY_SPL_STRING not provided, make one
    if test -z "$LUMPY_SPL_STRING"
    then
	for i in $( seq 0 $(( ${#FULL_BAM_LIST[@]}-1 )) )
	do
            FULL_BAM=${FULL_BAM_LIST[$i]}
            SPL_BAM=${SPL_BAM_LIST[$i]}
            DISC_BAM=${DISC_BAM_LIST[$i]}
	    
            FULL_BASE=`basename "$FULL_BAM"`
            SPL_BASE=`basename "$SPL_BAM"`
            DISC_BASE=`basename "$DISC_BAM"`

	    LUMPY_SPL_STRING="$LUMPY_SPL_STRING -sr bam_file:${SPL_BAM},back_distance:10,min_mapping_threshold:20,weight:1,id:$(($i+1))1,min_clip:20"
	done
    fi

    # if LUMPY_DISC_STRING not provided, make one
    if test -z "$LUMPY_DISC_STRING"
    then
	echo -n "Calculating alignment stats... "
	for i in $( seq 0 $(( ${#FULL_BAM_LIST[@]}-1 )) )
	do
            FULL_BAM=${FULL_BAM_LIST[$i]}
            SPL_BAM=${SPL_BAM_LIST[$i]}
            DISC_BAM=${DISC_BAM_LIST[$i]}
	    
            FULL_BASE=`basename "$FULL_BAM"`
            SPL_BASE=`basename "$SPL_BAM"`
            DISC_BASE=`basename "$DISC_BAM"`
	    
            # calc readlength if not provided
            if test -z "$READ_LENGTH"
            then
		READ_LENGTH=`$SAMBAMBA view $FULL_BAM | head -n 10000 | awk 'BEGIN { MAX_LEN=0 } { LEN=length($10); if (LEN>MAX_LEN) MAX_LEN=LEN } END { print MAX_LEN }'`
            fi
	    
            # calculate stats
            $SAMBAMBA view -F "paired and proper_pair and mate_is_reverse_strand and not (unmapped or mate_is_unmapped or reverse_strand or secondary_alignment or duplicate)" $FULL_BAM \
		| head -n 10000000 | tail -n 1000000 \
		| $PAIREND_DISTRO -r $READ_LENGTH -X 4 -N 1000000 -o ${TEMP_DIR}/$FULL_BASE.x4.histo \
		> ${TEMP_DIR}/$FULL_BASE.insert.stats
	    
            MEAN=`cat ${TEMP_DIR}/$FULL_BASE.insert.stats | tr '\t' '\n' | grep "^mean" | sed 's/mean\://g'`
            STDEV=`cat ${TEMP_DIR}/$FULL_BASE.insert.stats | tr '\t' '\n' | grep "^stdev" | sed 's/stdev\://g'`

	    LUMPY_DISC_STRING="$LUMPY_DISC_STRING -pe bam_file:${DISC_BAM},histo_file:${TEMP_DIR}/${FULL_BASE}.x4.histo,mean:${MEAN},stdev:${STDEV},read_length:${READ_LENGTH},min_non_overlap:${READ_LENGTH},discordant_z:5,back_distance:10,weight:1,id:$(($i+1))0,min_mapping_threshold:20"
	done
	echo "done"
    fi

    echo "Running LUMPY... "
    if [[ "$VERBOSE" -eq 1 ]]
    then
	echo "
# call lumpy
$LUMPY -t ${TEMP_DIR}/${OUTBASE} -mw $MIN_WEIGHT -tt $TRIM_THRES $EXCLUDE_BED_FMT $LUMPY_DISC_STRING $LUMPY_SPL_STRING > $TEMP_DIR/$OUTBASE.sv.bedpe
        "
    fi
    # call lumpy
    $LUMPY -t ${TEMP_DIR}/${OUTBASE} -mw $MIN_WEIGHT -tt $TRIM_THRES \
    	$EXCLUDE_BED_FMT \
    	$LUMPY_DISC_STRING \
    	$LUMPY_SPL_STRING \
    	> $TEMP_DIR/$OUTBASE.sv.bedpe

    if [[ "$VERBOSE" -eq 1 ]]
    then
	echo -e "
# convert to VCF, ensure that each variant has at least one sample with MIN_WEIGHT support
cat $TEMP_DIR/$OUTBASE.sv.bedpe \\
    | $BEDPETOVCF -t LUMPY -c $TEMP_DIR/$OUTBASE.sample.config -f $REF \\
    | awk -v MIN_WEIGHT=$MIN_WEIGHT 'BEGIN {S_IDX=0} {
        if ($0~\"^#\") print
        else {
            if (S_IDX==0) {
                split($9,fmt,\":\");
                for (i=1;i<=length(fmt);++i) {
                    if (fmt[i]==\"SUP\") S_IDX=i
                }
            }
            else {
                PASS=0
                for (i=10;i<=NF;++i) {
                    split($i,a,\":\");
                    if (a[S_IDX]>=MIN_WEIGHT) PASS=1;
                }
            }
        }
        if (PASS) print
    }' \\
    > $TEMP_DIR/$OUTBASE.sv.vcf
        "
    fi

    # convert to VCF, ensure that each variant has at least one sample with MIN_WEIGHT support
    cat $TEMP_DIR/$OUTBASE.sv.bedpe \
	| $BEDPETOVCF -t LUMPY -c $TEMP_DIR/$OUTBASE.sample.config -f $REF \
	| awk -v MIN_WEIGHT=$MIN_WEIGHT 'BEGIN {S_IDX=0} {
            if ($0~"^#") print
            else {
                if (S_IDX==0) {
                    split($9,fmt,":");
                    for (i=1;i<=length(fmt);++i) {
                        if (fmt[i]=="SUP") S_IDX=i
                    }
                }
                else {
                    PASS=0
                    for (i=10;i<=NF;++i) {
                        split($i,a,":");
                        if (a[S_IDX]>=MIN_WEIGHT) PASS=1;
                    }
                }
            }
            if (PASS) print
        }' \
	> $TEMP_DIR/$OUTBASE.sv.vcf

    if [[ "$VERBOSE" -eq 1 ]]
    then
	echo -e "
# make header
cat $TEMP_DIR/$OUTBASE.sv.vcf | awk '$0!~\"^#\" {exit}; 1' > $TEMP_DIR/header.txt
        "
    fi
    # make header
    cat $TEMP_DIR/$OUTBASE.sv.vcf | awk '$0!~"^#" {exit}; 1' > $TEMP_DIR/header.txt

    # genotype in parallel
    if [[ GENOTYPE -eq 1 ]]
    then
	if [[ "$VERBOSE" -eq 1 ]]
	then
	    echo -e "
# split the VCF file into slices of 100 lines each
mkdir -p $TEMP_DIR/gt
cat $TEMP_DIR/$OUTBASE.sv.vcf | grep -v \"^#\" | split -a 5 -d -l 100 - $TEMP_DIR/gt/spl
for s in \`ls $TEMP_DIR/gt/spl* | grep -v \"vcf\$\"\`
do
    cat $TEMP_DIR/header.txt \$s > \$s.vcf
done
            "
	fi
	# split the VCF file into slices of 100 lines each
	mkdir -p $TEMP_DIR/gt
	cat $TEMP_DIR/$OUTBASE.sv.vcf | grep -v "^#" | split -a 5 -d -l 100 - $TEMP_DIR/gt/spl
	for s in `ls $TEMP_DIR/gt/spl* | grep -v "vcf$"`
	do
	    cat $TEMP_DIR/header.txt $s > $s.vcf
	done

	# genotype each of the variants in parallel
	for i in $( seq 0 $(( ${#FULL_BAM_LIST[@]}-1 )) )
	do
	    FULL_BAM=${FULL_BAM_LIST[$i]}
	    SPL_BAM=${SPL_BAM_LIST[$i]}
            FULL_BASE=`basename "$FULL_BAM"`

            MEAN=`cat ${TEMP_DIR}/$FULL_BASE.insert.stats | tr '\t' '\n' | grep "^mean" | sed 's/mean\://g'`
            STDEV=`cat ${TEMP_DIR}/$FULL_BASE.insert.stats | tr '\t' '\n' | grep "^stdev" | sed 's/stdev\://g'`
	    READ_LENGTH=`$SAMBAMBA view $FULL_BAM | head -n 10000 | awk 'BEGIN { MAX_LEN=0 } { LEN=length($10); if (LEN>MAX_LEN) MAX_LEN=LEN } END { print MAX_LEN }'`

	    if [[ "$VERBOSE" -eq 1 ]]
	    then
		echo "# genotype each of the variants in parallel"
    		echo -e "$SVTYPER -v \$vcf -B $FULL_BAM -S $SPL_BAM -m $MEAN -sd $STDEV -rl $READ_LENGTH > \$vcf.gt ; mv \$vcf.gt \$vcf"
	    fi

	    for vcf in `ls $TEMP_DIR/gt/spl*.vcf`
	    do
    		echo "$SVTYPER -v $vcf -B $FULL_BAM -S $SPL_BAM -m $MEAN -sd $STDEV -rl $READ_LENGTH > $vcf.gt ; mv $vcf.gt $vcf"
	    done | parallel -j $THREADS
	done
	cat $TEMP_DIR/gt/*.vcf | awk '$0!~"^#" {exit}; 1' > $TEMP_DIR/header.txt
	cat $TEMP_DIR/gt/*.vcf | grep -v "^#" | cat $TEMP_DIR/header.txt - > $TEMP_DIR/$OUTBASE.sv.vcf
    fi

    # run cnvnator
    # WARNING: CNVNATOR currently only works on a single sample with one BAM file
    if [[ "$READDEPTH" -eq 1 ]]
    then
	echo "readdepth is $READDEPTH"

	WINDOW_SIZE=100
	SAMPLE=`cat $TEMP_DIR/$OUTBASE.sample.config | awk '{ print $1 }' | head -n 1`

	if [[ "$VERBOSE" -eq 1 ]]
	then
	    echo "
# run cnvnator-multi
$CNVNATOR_WRAPPER --cnvnator $CNVNATOR_MULTI -T $TEMP_DIR/cnvnator-temp -t $THREADS -w 100 -b ${FULL_BAM_LIST[$i]} -o $TEMP_DIR/$OUTBASE.rd -c $CNVNATOR_CHROMS_DIR -g GRCh37
            "
	fi
	$CNVNATOR_WRAPPER --cnvnator $CNVNATOR_MULTI -T $TEMP_DIR/cnvnator-temp -t $THREADS -w 100 -b ${FULL_BAM_LIST[$i]} -o $TEMP_DIR/$OUTBASE.readdepth -c $CNVNATOR_CHROMS_DIR -g GRCh37

	# Calculate read-depth of LUMPY calls
	if [[ "$VERBOSE" -eq 1 ]]
	then
	    echo "
# Calculate read-depth of LUMPY calls
$ANNOTATE_RD --cnvnator $CNVNATOR_MULTI -s $SAMPLE -w $WINDOW_SIZE -r $TEMP_DIR/cnvnator-temp/${FULL_BAM_LIST[$i]}.hist.root -v $TEMP_DIR/$OUTBASE.sv.vcf > $TEMP_DIR/$OUTBASE.sv.rd.vcf
            "
	fi
	$ANNOTATE_RD --cnvnator $CNVNATOR_MULTI -s $SAMPLE -w $WINDOW_SIZE -r $TEMP_DIR/cnvnator-temp/${FULL_BAM_LIST[$i]}.hist.root -v $TEMP_DIR/$OUTBASE.sv.vcf > $TEMP_DIR/$OUTBASE.rd.sv.vcf

	if [[ "$VERBOSE" -eq 1 ]]
	then
	    echo "mv $TEMP_DIR/$OUTBASE.rd.sv.vcf $TEMP_DIR/$OUTBASE.rd.sv.vcf"
	fi
	mv $TEMP_DIR/$OUTBASE.rd.sv.vcf $TEMP_DIR/$OUTBASE.sv.vcf
    fi

    # Annotate structural variants with VEP
    if [[ "$ANNOTATE" == "true" ]]
    then
	if [[ "$VERBOSE" -eq 1 ]]
	then
	    echo -e "
# Annotate structural variants with VEP
cat  $TEMP_DIR/$OUTBASE.sv.vcf \\
    | awk '\$0~\"^#\" || \$5\!~\"[\\\\\[\\\\\]]\"' \\
    | $VEP \\
    --fork $THREADS \\
    -o /dev/stdout \\
    --force_overwrite \\
    --offline \\
    --no_stats \\
    --cache \\
    --dir_cache $VEP_CACHE_DIR \\
    --species homo_sapiens \\
    --sift b \\
    --polyphen b \\
    --symbol \\
    --numbers \\
    --biotype \\
    --total_length \\
    --vcf \\
    --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \\
    | cat - <(cat $TEMP_DIR/$OUTBASE.sv.vcf | grep -v \"^#\" | awk '\$5~\"[\\\\\[\\\\\]]\"') \\
    > $TEMP_DIR/$OUTBASE.vep.sv.vcf
    "
	fi

	cat  $TEMP_DIR/$OUTBASE.sv.vcf \
	    | awk '$0~"^#" || $5!~"[\\[\\]]"' \
	    | $VEP \
            --fork $THREADS \
            -o /dev/stdout \
            --force_overwrite \
            --offline \
            --no_stats \
            --cache \
            --dir_cache $VEP_CACHE_DIR \
            --species homo_sapiens \
            --sift b \
            --polyphen b \
            --symbol \
            --numbers \
            --biotype \
            --total_length \
            --vcf \
            --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \
	    | cat - <(cat $TEMP_DIR/$OUTBASE.sv.vcf | grep -v "^#" | awk '$5~"[\\[\\]]"') \
	    > $TEMP_DIR/$OUTBASE.vep.sv.vcf

	mv $TEMP_DIR/$OUTBASE.vep.sv.vcf $TEMP_DIR/$OUTBASE.sv.vcf
    fi

    # write output
    cp $TEMP_DIR/$OUTBASE.sv.bedpe $OUTPUT.sv.bedpe
    cp $TEMP_DIR/$OUTBASE.sv.vcf $OUTPUT.sv.vcf

    # clean up
    if [[ "$KEEP" -eq 0 ]]
    then
	rm -r ${TEMP_DIR}
    fi

    echo "done"

    # exit cleanly
    exit 0
}

# Show usage when there are no arguments.
if test -z "$1"
then
    usage
    exit 1
fi

while getopts "K:h" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
	K)
	    ;;
        ?)
            usage
            exit
            ;;
    esac
done

# call the function
case "$1" in 
    'aln')
	aln "${@:2}"
	;;
    'var')
	var "${@:2}"
	;;
    'somatic')
	somatic "${@:2}"
	;;
    'sv')
	sv "${@:2}"
	;;
    *)
	usage
	echo -e "Error: command \"$1\" not recognized\n"
	exit 1
esac

## END SCRIPT
